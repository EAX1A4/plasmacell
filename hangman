#include <iostream>
#include <cstring>
#include <ctime>
#include <fstream>

#define _PATH "INSERT PATH HERE" // Should be like: "c:/path/to/file.txt"

using namespace std;

void cls(){ for (int i = 0; i < 100; ++i) printf("\n"); }
char *chooseWord(int diff);

int main(){
	// To randomize it
	srand(time(NULL));

	// All the stages
	char *stage[] = { " ",
		"\n \n \n \n \n \n \n \n --------\0",
		"\n |\n |\n |\n |\n |\n |\n |\n --------\0",
		"\n ________\n |\n |\n |\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /\n | /\n |/\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /   |\n | /\n |/\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /   |\n | /    o\n |/    /|\\ \n |      |\n |     / \\\n |\n |\n --------\0" };


	bool running = true;
	int diff = 1; // difficulty default is easy
	while (running){
		cout << "Welcome to Hangman++, type in the option number and hit Enter to select a menu option below:" << endl;
		cout << "(1) Play Game" << endl
			<< "(2) Set Difficulty" << endl
			<< "(3) Scores" << endl
			<< "(7) Press 7 anytime to Exit" << endl
			<< "---------------------------" << endl
			<< "Option: ";

		int option;
		cin >> option;
		cout << "---------------------------" << endl;

		switch (option)
		{
		case 1:
		{
			// Preparing the game
			char *secret = chooseWord(diff); // get the random word based on the difficulty
			char uInput[12], usedch[26]; // uInput those char that mathces. usedch is those who did not 
			// initialize all in usedch
			for (int i = 0; i < 26; ++i){
				usedch[i] = '\0';
			}
			int p = 0;
			for (p; p < strlen(secret); ++p){ // for every character in secret
				uInput[p] = '_'; // initialize all element in uInput except the last
			}
			uInput[p] = '\0'; // initialize the last element
			int hp = 0;

			bool game = true;

			// Playing the game
			while (game && hp < sizeof(stage) / sizeof(stage[0]) - 1){
				cls();
				cout << stage[hp];
				cout << endl;

				cout << "Used characters: ";
				int elm = 0;
				while (usedch[elm] != '\0' && elm < 25){
					cout << usedch[elm] << " ";
					++elm;
				}
				endl(cout);

				cout << "Word: ";
				int el = 0;
				while (el < strlen(secret)){
					cout << uInput[el] << " ";
					++el;
				}
				endl(cout);

				cout << "Guess: ";
				//char ch;
				cin.clear();
				cin.ignore();

				char ch[12];
				int order = 0;

				cin >> ch;
				while (ch[order] != '\0'){

					if (ch[order] == '7') // ORDER HERE
						return 0;

					if (islower(ch[order])) ch[order] = toupper(ch[order]); // ORDER HERE


					bool found = false;
					for (int i = 0; i < strlen(secret); ++i){
						if (secret[i] == ch[order]){ // ORDER HERE
							uInput[i] = ch[order]; // ORDER HERE
							found = true;
						}
					}

					if (!found){
						bool isused = false;

						int counter = 0;
						while (counter < 25 && usedch[counter] != '\0'){
							if (usedch[counter] == ch[order]){
								isused = true;
								break;
						}
							++counter;
						}

						if (!isused){
							usedch[counter] = ch[order]; // ORDER HERE
							++hp;
						}
					}

					++order;
				}
				// END HERE

				int cmp = strcmp(secret, uInput);
				if (!cmp){
					/* TEST START */

					cls();
					cout << stage[hp];
					cout << endl;

					cout << "Used characters: ";
					int elm = 0;
					while (usedch[elm] != '\0' && elm < 25){
						cout << usedch[elm] << " ";
						++elm;
					}
					endl(cout);

					cout << "Word: ";
					int el = 0;
					while (el < strlen(secret)){
						cout << uInput[el] << " ";
						++el;
					}

					/* TEST END */
					endl(cout);
					cout << "You guessed it!" << endl;
					cout << "The word was: " << secret << endl;
					game = false;

					ofstream file;
					file.open(_PATH, ios::app);
					if (file.is_open()){
						file << secret << endl;
						file.close();
					}
					else {
						cout << "Couldn't open \"" << _PATH << "\"" << endl;
					}
					cin.clear();
					cin.ignore();
					cout << "Enter to continue to menu: ";
					cin.get();
				}

				if (hp >= sizeof(stage) / sizeof(stage[0]) - 1){
					cls();
					cout << stage[hp];
					cout << endl;

					cout << "Used characters: ";
					int elm = 0;
					while (usedch[elm] != '\0' && elm < 25){
						cout << usedch[elm] << " ";
						++elm;
					}
					endl(cout);

					cout << "Word: ";
					int el = 0;
					while (el < strlen(secret)){
						cout << uInput[el] << " ";
						++el;
					}
					endl(cout);

					cin.clear();
					cin.ignore();

					cout << "You lost!" << endl;
					cout << "Press enter to continue to menu: ";
					cin.get();
				}

			}

			cout << "---------------------------" << endl;
			break;
		}
		case 2:
		{
			cout << "Choose difficulty" << endl
				<< "(1) Easy" << endl
				<< "(2) medium" << endl
				<< "(3) hard" << endl;
			cout << "Difficulty: ";
			cin >> diff;
			cls();
			cout << "Succesfully changed the difficulty!" << endl;
			break;
		}
		case 3:
		{
			ifstream file;
			file.open(_PATH);
			if (file){
				cout << "Guessed words: " << endl << endl;
				while (!file.eof()){
					char line[100];
					file >> line;
					cout << "\t" << line << endl;
				}
			}
			else {
				cout << "Couldn't open \"" << _PATH << "\"" << endl;
			}
			cout << "---------------------------" << endl;
			break;
		}
		case 7:
			return 0;
		default:
			cout << "Unknown option: " << option << endl;
			break;
		}
	}
	return 0;
}


char *chooseWord(int diff){
	switch (diff) {
	case 1:
	{
		char *easy[] = { "PLAY", "GAME", "STAY", "MAKE",
			"CAKE", "PLANE", "ABORT",
			"ACTOR", "CHAIR", "CYCLE" };
		return easy[rand() % sizeof(easy) / sizeof(easy[0])];
	}
	case 2:
	{
		char *medium[] = { "GAMBLE", "PURGED", "AUNITE", "ZYGOTE",
			"WRENCH", "ABANDON", "APPROVE",
			"BALLON", "CLUSTER", "EXPIRED" };
		return medium[rand() % sizeof(medium) / sizeof(medium[0])];
	}
	case 3:
	{
		char *hard[] = { "BACKWARD", "BOUNDARY", "CHEMICAL", "INTRUDER",
			"ORNAMENT", "POSTPONED", "SCRAMBLED",
			"TREASURED", "ZOOLOGIST", "APPALING" };
		return hard[rand() % sizeof(hard) / sizeof(hard[0])];
	}
	default:
		return "ERROR";
	}
}
