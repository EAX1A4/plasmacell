#include <iostream>
#include <cstring>
#include <ctime>
#include <fstream>

#define _PATH "c:/path/to/guessed.txt"
#define _EAS "c:/path/to/easy.txt"
#define _MED "c:/path/to/medium.txt"
#define _HARD "c:/path/to/hard.txt"


using namespace std;

void cls(){ for (int i = 0; i < 100; ++i) printf("\n"); } // To clear the screen
char *chooseWord(int diff); // Get the word
void printscene(char *stage, char *secret, char *usedch, char *uInput); // Print the screen
char *GWFF(char *fPath); // Get Word From File

int main(){
	// To randomize it
	srand(time(NULL));

	// All the stages in a c-string array
	char *stage[] = { " ",
		"\n \n \n \n \n \n \n \n --------\0",
		"\n |\n |\n |\n |\n |\n |\n |\n --------\0",
		"\n ________\n |\n |\n |\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /\n | /\n |/\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /   |\n | /\n |/\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /   |\n | /    o\n |/    /|\\ \n |      |\n |     / \\\n |\n |\n --------\0" };

	int diff = 1; // difficulty default is easy
	while (true){ // A endless loop
		cout << "Welcome to Hangman++, type in the option number and hit Enter to select a menu option below:" << endl;
		cout << "(1) Play Game" << endl
			<< "(2) Set Difficulty" << endl
			<< "(3) Scores" << endl
			<< "(7) Press 7 anytime to Exit" << endl
			<< "---------------------------" << endl
			<< "Option: ";

		int option;
		cin >> option;

		cout << "---------------------------" << endl;

		switch (option) // Switch depending on the input
		{
		case 1:
		{
			// Preparing the game
			bool game = true;
			char *secret = chooseWord(diff); // get the random word based on the difficulty
			if (secret == "ERROR"){ // If secret is equal to "ERROR", means there was an error
				cin.clear();
				cin.ignore();
				cout << "Enter to continue to menu: ";
				cin.get();
				cls();
				game = false;
			}

			char uInput[25], usedch[26] = { '\0' }; // uInput those char that mathces. usedch is those who did not 

			int p = 0;
			for (p; p < strlen(secret); ++p){ // for every character in secret
				uInput[p] = '_'; // initialize all element in uInput except the last
			}

			uInput[p] = '\0'; // initialize the last element
			int hp = 0;

			// Playing the game
			while (game && hp < 7){ // While you are not dead and haven't won
				printscene(stage[hp], secret, usedch, uInput); // Print out the stage, used character, how many words have been guessed correct
				cout << "Guess: ";
				cin.clear();
				cin.ignore();

				char ch[12]; // Input
				int order = 0;

				cin >> ch;

				while (ch[order] != '\0'){ // '\0' is the last element in a c-string

					if (ch[order] == '7') // If 7 is detected, the program will terminate itself
						return 0;

					// islower return false if it is not a small letter. If it is, we use toupper function to make it
					if (islower(ch[order])) ch[order] = toupper(ch[order]); 

					char *pch; // char pointer
					// We use the memchr function to search in 'secret' for a inputted character.
					pch = (char *)memchr(secret, ch[order], strlen(secret));
					if (pch != NULL){ // Means there was a match
						while (pch != NULL){ // Keeps running as long as there is a new match
							uInput[pch - secret] = ch[order]; //pch point at the element that match, secret point to the first
							pch = (char *)memchr(pch + 1, ch[order], strlen(pch + 1));  // New search
						}
					}
					else { // There were no match
						char *isused; // Holding the used characters
						isused = (char *)memchr(usedch, ch[order], strlen(usedch)); // Search if it is already there
						if (isused != NULL){  // If there is a match
							break;
						}
						else { // If not
							++hp; // Lose HP
							usedch[strlen(usedch)] = ch[order]; // Copy character to c-string
						}
					}
					++order; // New character in input
				}

				int cmp = strcmp(secret, uInput); // strcmp returns 0 if they match.
				if (!cmp && hp < 7){ // If it returns 0 (0 also means false), and hp is lower than 7
					printscene(stage[hp], secret, usedch, uInput); // Prints scene

					cout << "You guessed it!" << endl;
					cout << "The word was: " << secret << endl;
					game = false;

					ofstream score;
					score.open(_PATH, ios::app); // Opens and place write pointer at end (ios::app)
					if (score.is_open()){ // If it is open
						score<< secret << endl; // Write to it
						score.close(); // close
					}
					else {
						cout << "Couldn't open \"" << _PATH << "\"" << endl;
					}
					cin.clear();
					cin.ignore();
					cout << "Enter to continue to menu: ";
					cin.get();
					cls();
				}

				if (hp >= 6){ // Means you are dead
					printscene(stage[hp], secret, usedch, uInput); // print scene

					cin.clear();
					cin.ignore();

					cout << "You lost!" << endl;
					cout << "Press enter to continue to menu: ";
					cin.get();
					cls();
				}

			}
			break;
		}
		case 2:
		{
			cout << "Choose difficulty" << endl
				<< "(1) Easy" << endl
				<< "(2) medium" << endl
				<< "(3) hard" << endl;
			cout << "Difficulty: ";
			cin >> diff;
			cls();
			cout << "Succesfully changed the difficulty!" << endl;
			break;
		}
		case 3:
		{
			ifstream score;
			score.open(_PATH);
			if (score){
				cout << "Guessed words: " << endl << endl;
				while (!score.eof()){ // While we are not at the (E)nd (O)f the (F)ile
					char line[100];
					score >> line; // Read from file into line
					cout << "\t" << line << endl; // print out with a tabular
				}
			}
			else {
				cout << "Couldn't open \"" << _PATH << "\"" << endl;
			}
			cout << "---------------------------" << endl;
			cin.clear();
			cin.ignore();
			cout << "Enter to continue to menu: ";
			cin.get();
			cls();
			break;
		}
		case 7:
			return 0;
		default:
			cout << "Unknown option: " << option << endl;
			break;
		}
	}
	return 0;
}


char *chooseWord(int diff){
	switch (diff)
	{
	case 1:
		return GWFF(_EAS); // Return the returned from GGFF
	case 2:
		return GWFF(_MED); // ..
	case 3:
		return GWFF(_HARD); // ..
	default:
		return "ERROR";
	}
}


void printscene(char *stage, char *secret, char *usedch, char *uInput){
	cls(); // Clears the screen
	cout << stage; //Prints out the stage level
	cout << endl;

	cout << "Used characters: ";
	// Seperate each character in usedch array with a space
	for (int i = 0; i < strlen(usedch); ++i) cout << usedch[i] << " ";
	endl(cout);

	cout << "Word: ";
	// Seperate each cahacter in uInput array with a space
	for (int i = 0; i < strlen(secret); ++i) cout << uInput[i] << " ";
	endl(cout);
}

char *GWFF(char *fPath){ // Get Word From File
	ifstream file;
	ifstream score;

	file.open(fPath);
	if (file.is_open()){
		score.open(_PATH);
		char *var = new char[12]; // Dynamically allocate new c-string in heap memory
		file >> var; // Reads into this new allocated memory

		if (score.is_open()){ // If score file is open
			std::size_t size; // Stores the position
			score.seekg(0, ios::end); // Seeks to the end of the file
			size = score.tellg(); // Get position
			char *MATCH = new char[size]; // New dynamic allocated c-string in heap memory
			score.seekg(0, ios::beg); // Seeks to the beginning of the file
			score.read(MATCH, size); // Read the entire file into MATCH
			score.close(); // close file

			if (strstr(MATCH, var) == NULL){ // strstr returns NULL if it cannot find argument2 in argument1
				delete MATCH; // When you dynamically allocate memory, you have to deallocate it
				return var;
			}
			else {
				while (strstr(MATCH, var) != NULL){ // Means it found a match in the score file
					if (file.eof()){ // Means we have ran out of words
						cout << "You ran out of words in this difficulty!" << endl;
						return "ERROR";
					}
					else {
						file >> var; // Reads a new words into var
					}
				}
				return var;
			}
		}
		else {
			cout << "Could not load scores!" << endl;
			return "ERROR";
		}
	}
	else {
		cout << "Could not open file: " << fPath << endl;
		return "ERROR";
	}
}
