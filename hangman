#include <iostream>
#include <cstring>
#include <ctime>
#include <fstream>

#define _PATH "C:/path/to/guessed.txt"
#define _EAS "c:/path/to/easy.txt"
#define _MED "c:/path/to/medium.txt"
#define _HARD "c:/path/to/hard.txt"


using namespace std;

void cls(){ for (int i = 0; i < 100; ++i) printf("\n"); }
char *chooseWord(int diff);
void printscene(char *stage, char *secret, char *usedch, char *uInput);
char *GWFF(char *fPath);

int main(){
	// To randomize it
	srand(time(NULL));

	// All the stages
	char *stage[] = { " ",
		"\n \n \n \n \n \n \n \n --------\0",
		"\n |\n |\n |\n |\n |\n |\n |\n --------\0",
		"\n ________\n |\n |\n |\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /\n | /\n |/\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /   |\n | /\n |/\n |\n |\n |\n |\n --------\0",
		"\n ________\n |  /   |\n | /    o\n |/    /|\\ \n |      |\n |     / \\\n |\n |\n --------\0" };


	bool running = true;
	int diff = 1; // difficulty default is easy
	while (running){
		cout << "Welcome to Hangman++, type in the option number and hit Enter to select a menu option below:" << endl;
		cout << "(1) Play Game" << endl
			<< "(2) Set Difficulty" << endl
			<< "(3) Scores" << endl
			<< "(7) Press 7 anytime to Exit" << endl
			<< "---------------------------" << endl
			<< "Option: ";

		int option;
		cin >> option;
		cout << "---------------------------" << endl;

		switch (option)
		{
		case 1:
		{
			// Preparing the game
			bool game = true;
			char *secret = chooseWord(diff); // get the random word based on the difficulty
			if (secret == "ERROR"){
				cin.clear();
				cin.ignore();
				cout << "Enter to continue to menu: ";
				cin.get();
				cls();
				game = false;
			}

			char uInput[25], usedch[26] = { '\0' }; // uInput those char that mathces. usedch is those who did not 

			int p = 0;
			for (p; p < strlen(secret); ++p){ // for every character in secret
				uInput[p] = '_'; // initialize all element in uInput except the last
			}

			uInput[p] = '\0'; // initialize the last element
			int hp = 0;

			// Playing the game
			while (game && hp < sizeof(stage) / sizeof(stage[0]) - 1){
				printscene(stage[hp], secret, usedch, uInput);
				cout << "Guess: ";
				cin.clear();
				cin.ignore();

				char ch[12];
				int order = 0;

				cin >> ch;

				while (ch[order] != '\0'){

					if (ch[order] == '7') // ORDER HERE
						return 0;

					if (islower(ch[order])) ch[order] = toupper(ch[order]); // ORDER HERE

					char *pch;
					pch = (char *)memchr(secret, ch[order], strlen(secret));
					if (pch != NULL){
						while (pch != NULL){
							uInput[pch - secret] = ch[order];
							pch = (char *)memchr(pch + 1, ch[order], strlen(pch + 1));
						}
					}
					else {
						char *isused;
						isused = (char *)memchr(usedch, ch[order], strlen(usedch));
						if (isused != NULL){
							break;
						}
						else {
							++hp;
							usedch[strlen(usedch)] = ch[order];
						}
					}
					++order;
				}

				int cmp = strcmp(secret, uInput);
				if (!cmp && hp < 7){
					printscene(stage[hp], secret, usedch, uInput);

					cout << "You guessed it!" << endl;
					cout << "The word was: " << secret << endl;
					game = false;

					ofstream file;
					file.open(_PATH, ios::app);
					if (file.is_open()){
						file << secret << endl;
						file.close();
					}
					else {
						cout << "Couldn't open \"" << _PATH << "\"" << endl;
					}
					cin.clear();
					cin.ignore();
					cout << "Enter to continue to menu: ";
					cin.get();
					cls();
				}

				if (hp >= sizeof(stage) / sizeof(stage[0]) - 1){
					printscene(stage[hp], secret, usedch, uInput);

					cin.clear();
					cin.ignore();

					cout << "You lost!" << endl;
					cout << "Press enter to continue to menu: ";
					cin.get();
					cls();
				}

			}
			break;
		}
		case 2:
		{
			cout << "Choose difficulty" << endl
				<< "(1) Easy" << endl
				<< "(2) medium" << endl
				<< "(3) hard" << endl;
			cout << "Difficulty: ";
			cin >> diff;
			cls();
			cout << "Succesfully changed the difficulty!" << endl;
			break;
		}
		case 3:
		{
			ifstream file;
			file.open(_PATH);
			if (file){
				cout << "Guessed words: " << endl << endl;
				while (!file.eof()){
					char line[100];
					file >> line;
					cout << "\t" << line << endl;
				}
			}
			else {
				cout << "Couldn't open \"" << _PATH << "\"" << endl;
			}
			cout << "---------------------------" << endl;
			break;
		}
		case 7:
			return 0;
		default:
			cout << "Unknown option: " << option << endl;
			break;
		}
	}
	return 0;
}


char *chooseWord(int diff){
	switch (diff)
	{
	case 1:
		return GWFF(_EAS);
	case 2:
		return GWFF(_MED);
	case 3:
		return GWFF(_HARD);
	default:
		return "ERROR";
	}
}


void printscene(char *stage, char *secret, char *usedch, char *uInput){
	cls();
	cout << stage;
	cout << endl;

	cout << "Used characters: ";
	for (int i = 0; i < strlen(usedch); ++i) cout << usedch[i] << " ";
	endl(cout);

	cout << "Word: ";
	for (int i = 0; i < strlen(secret); ++i) cout << uInput[i] << " ";
	endl(cout);
}

char *GWFF(char *fPath){ // Get Word From File
	ifstream file;
	ifstream score;

	file.open(fPath);
	if (file.is_open()){
		score.open(_PATH);
		char *var = new char[12];
		file >> var;

		if (score.is_open()){
			std::size_t size;
			score.seekg(0, ios::end);
			size = score.tellg();
			char *MATCH = new char[size];
			score.seekg(0, ios::beg);
			score.read(MATCH, size);
			score.close();

			if (strstr(MATCH, var) == NULL){
				delete MATCH;
				return var;
			}
			else {
				while (strstr(MATCH, var) != NULL){
					if (file.eof()){
						cout << "You ran out of words in this difficulty!" << endl;
						return "ERROR";
					}
					else {
						file >> var;
					}
				}
				return var;
			}
		}
		else {
			cout << "Could not load scores!" << endl;
			return "ERROR";
		}
	}
	else {
		cout << "Could not open file: " << fPath << endl;
		return "ERROR";
	}
}
